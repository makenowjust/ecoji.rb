# frozen_string_literal: true

require 'test_helper'

class EcojiTest < Minitest::Test
  def check(data, expected_v1, expected_v2)
    assert_equal expected_v1, Ecoji.encode(data, version: 1)
    assert_equal data, Ecoji.decode(expected_v1)

    assert_equal expected_v2, Ecoji.encode(data, version: 2)
    assert_equal data, Ecoji.decode(expected_v2)
  end

  def test_encode_decode
    check '', '', ''
    check 'k', 'üëΩ‚òï‚òï‚òï', 'üëΩ‚òï'
    check "\x00\x01", 'üÄÑüÜö‚òï‚òï', 'üÄÑ‚ôì‚òï'
    check "\x00\x01\x02", 'üÄÑüÜöüçà‚òï', 'üÄÑ‚ôìüçà‚òï'
    check "\x00\x01\x02\x00", 'üÄÑüÜöüçà‚öú', 'üÄÑ‚ôìüçàü•∑'
    check "Base64 is so 1999, isn't there something better?",
          'üèóüì©üé¶üêáüéõüìòüîØüöúüíûüòΩüÜñüêäüé±ü•ÅüöÑüå±üíûüò≠üíÆüáµüí¢üï•üê≠üî∏üçâüö≤ü¶ëüê∂üí¢üï•üîÆüî∫üçâüì∏üêÆüåºüë¶üöüü•∞‚òï',
          'üßèüì©üßàüêáüßÖüìòüîØüöúüíûüòΩ‚ôèüêäüé±ü•ÅüöÑüå±üíûüò≠üíÆ‚úäüí¢ü™†üê≠ü©¥üçâüö≤ü¶ëüê∂üí¢ü™†üîÆü©πüçâüì∏üêÆüåºüë¶üöüü•∞‚òï'
    check 'Ëâ≤„ÅØÂåÇ„Å∏„Å©Êï£„Çä„Å¨„Çã„Çí',
          'ü•íüç£üéÄü§Æüòäüî´üöúüòÆüìòü§ºüé≠üë∫ü•äüê´üèÖü§ØüìΩüîãüå≥üé∞üìúüéÜüé≠üï∫',
          'ü•íüç£üéÄü§Æüòäüî´üöúüòÆüìòü§ºüé≠üë∫ü•äüê´üèÖü§ØüßÆüîãüå≥üé∞üìúüéÜüé≠üï∫'
  end

  def check_decode(data, encoded)
    assert_equal data, Ecoji.decode(encoded)
  end

  def test_decode_newline
    check_decode '1234567890abc', "üéå\nüöü\nüéó\nüà∏\nüé•\nü§†\nüì†\nüêÅ\nüëñ\nüì∏\nüéà\n‚òï"
    check_decode '1234567890abc', "üéå\nüöü\nü¶ø\nü¶£\nüé•\nü§†\nüì†\nüêÅ\nüëñ\nüì∏\nüéà\n‚òï"
    check_decode '1234567890abc', "üéå\r\nüöü\r\nüéó\r\nüà∏\r\nüé•\r\nü§†\r\nüì†\r\nüêÅ\r\nüëñ\r\nüì∏\r\nüéà\r\n‚òï"
    check_decode '1234567890abc', "üéå\r\nüöü\r\nü¶ø\r\nü¶£\r\nüé•\r\nü§†\r\nüì†\r\nüêÅ\r\nüëñ\r\nüì∏\r\nüéà\r\n‚òï"
  end

  def test_decode_concatenated
    check_decode 'abcdefxyz', 'üëñüì∏üßàüå≠üë©‚òïüí≤ü•áü™ö‚òï'
    check_decode "abc6789XY\n", 'üëñüì∏üéà‚òïüé•ü§†üì†üèçüê≤üë°üïü‚òï'

    check_decode 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrs',
                 'üèí‚òï‚òï‚òïüèóüà≥‚òï‚òïüèüüåöüëë‚òïüè´üçåüî•üìëüèæüéåüõ°üî¢üêíüè£üçúüõ¢üê•‚òï‚òï‚òïüê™üëÜüì®üê´üéàüöå‚òï‚òïüéêüöØüèõüêáüé©ü§∞üîì‚òïüëñüì∏üé¶üå≠üë™üïïüì¨üèçüë∫üòÅüöóüêøüíéüöÉüå§üïí'

    check_decode 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrs',
                 'üèí‚òïüßèü•±‚òïüßùüåöüëë‚òïüè´üçåüî•üìëüß¶üéåü´£üßΩüêíüè£üçúü´§üê•‚òïüê™üëÜüì®üê´üéàüöå‚òïüéêüöØüßôüêáüé©ü§∞üîì‚òïüëñüì∏üßàüå≠üë™ü™êüì¨üõºüë∫üòÅüöóüß®üíéüöÉü¶©ü™Ñ'
  end

  def check_decode_error(encoded, expected_message)
    encoded = encoded.pack('U*') if encoded.is_a?(Array)
    begin
      Ecoji.decode(encoded)
    rescue Ecoji::Error => e
      assert e.message =~ expected_message,
             "Unmatched exception message: #{e.message.inspect}, expected: #{expected_message}"
    rescue StandardError => e
      raise "Unexpected exception: #{e.class}: #{e.message}"
    else
      raise 'Exception was not raised'
    end
  end

  def test_decode_garbage
    check_decode_error('not emojisV2', /Non Ecoji character seen/)
    check_decode_error('üü†üü°ü§çüü©', /Non Ecoji character seen/)

    check_decode_error('üå∂üå∂üå∂üå∂üå∂', /Unexpected end of data, input data size not multiple of 4/)

    check_decode_error([Ecoji::PADDING_LAST_V1[0]] + (0..2).map do |i|
                                                       Ecoji::Emojis::V1[i]
                                                     end, /Last padding seen in unexpected position/)
    check_decode_error([Ecoji::PADDING_LAST_V2[0]] + (0..2).map do |i|
                                                       Ecoji::Emojis::V2[i]
                                                     end, /Last padding seen in unexpected position/)
    check_decode_error([Ecoji::Emojis::V1[0], Ecoji::PADDING_LAST_V1[0]] + (1..2).map do |i|
                                                                             Ecoji::Emojis::V1[i]
                                                                           end, /Last padding seen in unexpected position/)
    check_decode_error([Ecoji::Emojis::V2[0], Ecoji::PADDING_LAST_V2[0]] + (1..2).map do |i|
                                                                             Ecoji::Emojis::V2[i]
                                                                           end, /Last padding seen in unexpected position/)

    check_decode_error([0x1f004, 0x1f170, Ecoji::PADDING, 0x1f93e], /Unexpectedly saw non-padding after padding/)

    check_decode_error([Ecoji::PADDING] + (1..3).map do |i|
                                            Ecoji::Emojis::V2[i]
                                          end, /Padding unexpectedly seen in first position/)
    check_decode_error((1..4).map do |i|
                         Ecoji::Emojis::V2[i]
                       end + ([Ecoji::PADDING] * 4), /Padding unexpectedly seen in first position/)

    check_decode_error((1..3).map do |i|
                         Ecoji::Emojis::V2[i]
                       end, /Unexpected end of data, input data size not multiple of 4/)
    check_decode_error((1..5).map do |i|
                         Ecoji::Emojis::V2[i]
                       end, /Unexpected end of data, input data size not multiple of 4/)
  end

  def test_decode_mixed
    check_decode_error([0x1f004, 0x1f170, 0x1f93f, 0x1f93e], /Emojis from different ecoji versions seen/)
    check_decode_error([0x1f004, 0x1f93f, 0x1f170, 0x1f93e], /Emojis from different ecoji versions seen/)
    check_decode_error(
      [0x1f004, 0x1f170, 0x1f170, 0x1f93e, 0x1f004, 0x1f170, 0x1f170, 0x1f93e, 0x1f004, 0x1f170, 0x1f93f,
       0x1f93e], /Emojis from different ecoji versions seen/
    )

    check_decode_error([0x1f004, 0x1f170, 0x1f004, Ecoji::PADDING_LAST_V2[0]],
                       /Emojis from different ecoji versions seen/)
    check_decode_error([0x1f004, 0x1f170, 0x1f004, Ecoji::PADDING_LAST_V2[1]],
                       /Emojis from different ecoji versions seen/)

    check_decode_error([0x1f004, 0x1f004, 0x1f93f, Ecoji::PADDING_LAST_V1[0]],
                       /Emojis from different ecoji versions seen/)
    check_decode_error([0x1f004, 0x1f004, 0x1f93f, Ecoji::PADDING_LAST_V1[1]],
                       /Emojis from different ecoji versions seen/)
  end
end
